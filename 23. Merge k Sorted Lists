/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
		if (lists.length == 0)
			return null;
 
		//PriorityQueue is a sorted queue
		PriorityQueue<ListNode> q = new PriorityQueue<ListNode>(lists.length,
				new Comparator<ListNode>() {
					public int compare(ListNode a, ListNode b) {
						return a.val-b.val;
					}
				});
 
		//add first node of each list to the queue
		for (ListNode list : lists) {
			if (list != null)
				q.add(list);
		}
 
		ListNode head = new ListNode(0);
		ListNode p = head; // serve as a pointer/cursor
 
		while (q.size() > 0) {
			ListNode temp = q.poll();
			//poll() retrieves and removes the head of the queue - q. 
			p.next = temp;
 
			//keep adding next element of each list
			if (temp.next != null)
				q.add(temp.next);
 
			p = p.next;
		}
 
		return head.next;
}
}

第一种通过heap，就是直接对第一个数排序了，然后每次运行都是直接读。思路知道就好了

下面是一种最快的运行方式：（感觉可以理解为二分法，下次自己做的时候详细看看）
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
public ListNode mergeKLists(ListNode[] lists) {
    int l = lists.length;
    if (l == 1)
        return lists[0];
    if (l == 0)
        return null;
    // divide the lists to two parts
    int l1 = l / 2;
    int l2 = l - l1;
    ListNode[] left = new ListNode[l1];
    ListNode[] right = new ListNode[l2];
    System.arraycopy(lists,0,left,0,l1); 
    System.arraycopy(lists,l1,right,0,l2); 
    ListNode p1 = mergeKLists(left);
    ListNode p2 = mergeKLists(right);
    ListNode head = null;
    // solve the null situation
    if (p1 == null) {
        head = p2;
        return head;
    }
    if (p2 == null) {
        head = p1;
        return head;
    }
    // determine the head node
    if (p1.val < p2.val) {
        head = p1;
        p1 = p1.next;
    } else {
        head = p2;
        p2 = p2.next;
    }
    ListNode p = head;
    // loop until one part become null
    while (p1 != null && p2 != null) {
        if (p1.val < p2.val) {
            p.next = p1;
            p1 = p1.next;
            p = p.next;
        }
        else {
            p.next = p2;
            p2 = p2.next;
            p = p.next;
        }
    }
    // connect the remains to the list
    if (p1 == null)
        p.next = p2;
    else p.next = p1;
    return head;
}
}
