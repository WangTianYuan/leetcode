public class Solution {
    public int reverse(int x) {
        boolean a=true;
        List<Integer> list=new ArrayList<Integer>();
        int rev=0;
        if(x==0||x==-2147483648){
        	return 0;
        }
        if(x<0){
        	a=false;
        	x=-x;
        }
        while(x/10>0){
        	list.add(x%10);
        	x=x/10;
        }
        list.add(x);
        for(int i=0;i<list.size();i++){
        	rev+=list.get(i)*(Math.pow(10, list.size()-i-1));
        }
        if(rev>=2147483647){
        	return 0;
        }
        if(a){
        	return rev;
        }else{
        	return -rev;
        }
    }
}

这一题不是很难，但是有很多特例需要考虑，首先数字为0，其次数字小于0，最后Integer的上下界。上面我写的是一个一个判断，耗时较长。

下面是一个2ms运行的方式：
public class Solution {
    public int reverse(int x) {
        long result = 0;
	    while (x != 0) {
	        result = result * 10 + x%10;
	        if (result > Integer.MAX_VALUE || result < Integer.MIN_VALUE) {
	            return 0;
	        }
	        x = x / 10;
	    }
	    return (int)result;
    }
}
