public int climbStairs(int n) {
		int c = 0;
		int l = 0;
		while (l <= n) {
			c += combination(n, l);
			l = l + 1;
			n = n - 1;
		}
		return c;
	}

	private static long factorial(int n) {
		return (n > 1) ? n * factorial(n - 1) : 1;
	}

	public static long combination(int n, int m) {
		return (n >= m) ? factorial(n) / factorial(n - m) / factorial(m) : 0;
	}
这是我开始的想法：通过组合来计算，但是这里并不是组合，因为不同的2的位置也是有差异的；
  然后我想着可不可以用去重的全排列，理论应该是可行的，但是对这个题目而言太复杂。


下面是别人的思路：动态规划算法：
public int climbStairs(int n) {
    // base cases
    if(n <= 0) return 0;
    if(n == 1) return 1;
    if(n == 2) return 2;
    
    int one_step_before = 2;
    int two_steps_before = 1;
    int all_ways = 0;
    
    for(int i=2; i<n; i++){
    	all_ways = one_step_before + two_steps_before;
    	two_steps_before = one_step_before;
        one_step_before = all_ways;
    }
    return all_ways;
}

分析：The problem seems to be a dynamic programming one. Hint: the tag also suggests that!
Here are the steps to get the solution incrementally.

Base cases:
if n <= 0, then the number of ways should be zero.
if n == 1, then there is only way to climb the stair.
if n == 2, then there are two ways to climb the stairs. 
One solution is one step by another; the other one is two steps at one time.

The key intuition to solve the problem is that given a number of stairs n,
if we know the number ways to get to the points [n-1] and [n-2] respectively, denoted as n1 and n2 , 
then the total ways to get to the point [n] is n1 + n2. Because from the [n-1] point,
we can take one single step to reach [n]. And from the [n-2] point,
we could take two steps to get there. There is NO overlapping between these two solution sets, because we differ in the final step.

Now given the above intuition, one can construct an array where each node stores the solution for each number n. 
Or if we look at it closer, it is clear that this is basically a fibonacci number, with the starting numbers as 1 and 2, 
instead of 1 and 1.
