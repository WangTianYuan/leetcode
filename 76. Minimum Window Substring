public String minWindow(String s, String t) {
		List<Character> ct = new ArrayList<Character>();
		for (int i = 0; i < t.length(); i++)
			ct.add(t.charAt(i));
		char[] tempc = new char[s.length()];
		int[] tempi = new int[s.length()];
		int index = 0;
		for (int i = 0; i < s.length(); i++) {
			if (ct.contains(s.charAt(i))) {
				tempc[index] = s.charAt(i);
				tempi[index] = i;
				index++;
			}
		}
		int length = Integer.MAX_VALUE;
		int start = 0;
		int end = s.length() - 1;
		for (int i = 0; i < index-ct.size()+1; i++) {
			List<Character> tlist = new ArrayList<Character>(ct);
			int j = i;
			while (tlist.size() != 0&&j<index) {
				if (tlist.contains(tempc[j])) {
					for (int k = 0; k < tlist.size(); k++) {
						if (tlist.get(k) == tempc[j]) {
							tlist.remove(k);
							break;
						}
					}
				}
				j++;
			}
			if (tlist.size() != 0 && j >= index)
				continue;
			int l2 = tempi[j - 1] - tempi[i] + 1;
			if(length>l2){
				start = tempi[i];
				end = tempi[j - 1];
				length = l2;
			}
		}
		if (length == Integer.MAX_VALUE)
			return "";
		else
			return s.substring(start, end + 1);
	}

运行时间：超时，但是思路应该没有问题。。改了很多次，每次考虑都不完整，这个是自己思考的，所以当时的想法可以借鉴一下。
先将字符串t变成list，然后将字符串s中在list中存在的字符都记录成字符数组tc，并做好索引记录，然后对字符数组tc进行遍历：
  从第一个开始，一致判断直到出现list中的所有字符，记录长度；
  然后从第二个开始，每次都记录最小的长度；
遍历完以后长度最小的对应的start和end就是在字符串s中的索引。可以得到结果。



public String minWindow(String S, String T) {
    if(S==null||S.isEmpty()||T==null||T.isEmpty()) return "";
    int i=0, j=0;
    int[] Tmap=new int[256];
    int[] Smap=new int[256];
    for(int k=0; k< T.length(); k++){
        Tmap[T.charAt(k)]++;
    }
    int found=0;
    int length=Integer.MAX_VALUE;
    String res="";
    while(j<S.length()){
        if(found<T.length()){
            if(Tmap[S.charAt(j)]>0){
                Smap[S.charAt(j)]++;
                if(Smap[S.charAt(j)]<=Tmap[S.charAt(j)]){
                    found++;
                }
            }
            j++;
        }
        while(found==T.length()){
            if(j-i<length){
                length=j-i; res=S.substring(i,j);
            }
            if(Tmap[S.charAt(i)]>0){
                Smap[S.charAt(i)]--;
                if(Smap[S.charAt(i)]<Tmap[S.charAt(i)]){
                    found--;
                }
            }
            i++;
        }
    }
    return res;
}
运行时间：11ms。



public String minWindow(String s, String t) {
        char[] s_array = s.toCharArray();
        char[] t_array = t.toCharArray();
        int[] map = new int[256];
        int end = 0;
        int start = 0;
        int min_length = Integer.MAX_VALUE;
        for(int i = 0; i < t_array.length; i++)
            map[t_array[i]] ++;
        int count = t_array.length;
        int min_start = 0;
        while(end < s_array.length)
        {
            if(map[s_array[end]] > 0)
            {
                count--;
            }
            map[s_array[end]] --;
            while(count == 0)
            {
                if((end - start + 1) < min_length)
                {
                    min_length = end - start + 1;
                    min_start = start;
                }
                map[s_array[start]] ++;
                if(map[s_array[start]] > 0){
                    count ++;
                }
                start++;
            }
            end ++;

        }
        if( min_start+min_length > s_array.length)
            return "";
        return s.substring(min_start, min_start+min_length);
    }
    
    运行时间：4ms。
