public String simplifyPath(String path) {
        if(path.length()==0)
        	return path;
        char[] str=path.toCharArray();
        if(str[0]!='/')
        	return path;
        String[] name=path.split("/");
        String []temp=new String[name.length];
        int j=0;
        for(int i=1;i<name.length;i++){
        	if(name[i].equals("")||name[i].equals("."))
        		continue;
        	if(name[i].equals("..")&&j!=0){
        		j--;
        	}
        	if(!name[i].equals("..")){
        		temp[j]=name[i];
        		j++;
        	}
        	}
        String s="";
        if(j==0)
        	return s+"/";
        for(int i=0;i<j;i++){
        	s=s+"/";
        	s=s+temp[i];
        }
        return s;
    }
运行时间：16ms。
思路就是先考虑边界情况，然后使用split将目录分开，然后进行判断，哪些代表上一级，哪些代表无意义，哪些代表下一级等，最后再进行整合。

public String simplifyPath(String path) {
    Deque<String> stack = new LinkedList<>();
    Set<String> skip = new HashSet<>(Arrays.asList("..",".",""));
    for (String dir : path.split("/")) {
        if (dir.equals("..") && !stack.isEmpty()) stack.pop();
        else if (!skip.contains(dir)) stack.push(dir);
    }
    String res = "";
    for (String dir : stack) res = "/" + dir + res;
    return res.isEmpty() ? "/" : res;
}
这种思路其实一致，只不过使用了栈和集合（本来也想使用栈，但不知道怎么顺序输出），这种方式不需要考虑边界情况，循环中的判断也更简便，但耗时差不多。


public String simplifyPath(String path) {
        StringBuilder sb = new StringBuilder();
        Stack<String> stack = new Stack<>();
        int i = 0, len = path.length();
        while (i < len) {
            if (path.charAt(i) == '/') {
                int j = i+1;
                while (j < len && path.charAt(j) != '/') {
                    j++;
                }
                String current = path.substring(i+1, j);
                if (current.equals("..")) {
                    if (!stack.isEmpty()) {
                        stack.pop();
                    }
                } else {
                    if (!current.equals(".") && !current.equals("")) {
                        stack.push(current);
                    }
                }
                i = j;
            }
        }
        for (String s : stack) {
            sb.append("/"+s);
        }
        return sb.length() == 0 ? "/" : sb.toString();
    }
    
    
 运行时间：9ms。没有使用split函数，而是采用的循环判断的方法，时间更短，但是基本思路都是一样的。
