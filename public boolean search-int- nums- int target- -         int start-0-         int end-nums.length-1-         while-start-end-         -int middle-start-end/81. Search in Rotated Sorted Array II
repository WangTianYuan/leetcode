public boolean search(int[] nums, int target) {
        int start=0;
        int end=nums.length-1;
        while(start<=end){
        	int middle=(start+end)/2;
        	if(nums[middle]==target)
        		return true;
        	if(nums[start]<nums[middle]){
        		if(nums[middle]>target&&nums[start]<=target){
        			end=middle-1;
        		}else{
        			start=middle+1;
        		}
        	}else if(nums[middle]<nums[end]){
        		if(nums[middle]<target&&nums[end]>=target){
        			start=middle+1;
        		}else{
        			end=middle-1;
        		}
        	}else if(nums[start]==nums[middle]){
        		start++;
        	}else{
        		end--;
        	}
        }
        return false;
    }
运行时间：1ms。思路和33题一致，其实就是使用二分法，不过需要增加一些判断，还有就是因为可能有重复，所以判断的地方不能用<=和>=。而是多加了两个判断。


public boolean search(int[] nums, int target) {
    int start  = 0, end = nums.length - 1;
    
    //check each num so we will check start == end
    //We always get a sorted part and a half part
    //we can check sorted part to decide where to go next
    while(start <= end){
        int mid = start + (end - start)/2;
        if(nums[mid] == target) return true;
        
        //if left part is sorted
        if(nums[start] < nums[mid]){
            if(target < nums[start] || target > nums[mid]){
                //target is in rotated part
                start = mid + 1;
            }else{
                end = mid - 1;
            }
        }else if(nums[start] > nums[mid]){
            //right part is rotated
            
            //target is in rotated part
            if(target < nums[mid] || target > nums[end]){
                end = mid -1;
            }else{
                start = mid + 1;
            }
        }else{
            //duplicates, we know nums[mid] != target, so nums[start] != target
            //based on current information, we can only move left pointer to skip one cell
            //thus in the worest case, we would have target: 2, and array like 11111111, then
            //the running time would be O(n)
            start ++;
        }
    }
    
    return false;
}
别人的思路：其实也是二分法判断，不过比我的要少一个if，是因为他第二个判断中包括了我的第四个判断内容。
