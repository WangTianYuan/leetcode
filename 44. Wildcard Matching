public boolean isMatch(String s, String p) {
		char[] cs = s.toCharArray();
		char[] cp = p.toCharArray();

		int sindex = 0, pindex = 0;
		int ss = -1, pp = -1;
		while (sindex < cs.length) {
			if (pindex == cp.length) {
				if (pp == -1) {
					return false;
				}
				pindex = pp + 1;
				sindex = ss++;
			} else if (cs[sindex] == cp[pindex] || cp[pindex] == '?') {
				sindex++;
				pindex++;
			} else if (cp[pindex] == '*') {
				pp = pindex;
				ss = sindex;
				pindex++;
			} else {
				if (pp == -1) {
					return false;
				} else {
					pindex = pp + 1;
					sindex = ss++;
				}
			}
		}
		while (pindex < cp.length) {
			if (cp[pindex] != '*')
				break;
			pindex++;
		}
		return pindex == cp.length;
	}
思路：这个是通配符匹配，与之前的正则匹配不一样，对于'?'很好判断，只需判断单个即可。对于'*'特别是多个'*'就需要进行回溯。
  即先判断是否一致或者为'?'，是的话索引都后移一位，如果是'*'的话就需要设置回溯点，然后对'*'的下一个开始判断，直到s中出现与其一样的（每次pi不加,si加）；
  继续判断后续是否一致，知道出现下一个'*'，然后将回溯点放到这（因为能到这里，说明前面两个'*'之间的字符串匹配成功了）。继续上面的步骤判断。
最后对s遍历以后，对p遍历，如果后面的不为'*'说明有些字符串没匹配上，返回false
 
  运行时间71ms
  
另一种思路：使用DP
public class Solution {
    public boolean isMatch(String s, String p) {
        boolean[][] match=new boolean[s.length()+1][p.length()+1];
        match[s.length()][p.length()]=true;
        for(int i=p.length()-1;i>=0;i--){
            if(p.charAt(i)!='*')
                break;
            else
                match[s.length()][i]=true;
        }
        for(int i=s.length()-1;i>=0;i--){
            for(int j=p.length()-1;j>=0;j--){
                if(s.charAt(i)==p.charAt(j)||p.charAt(j)=='?')
                        match[i][j]=match[i+1][j+1];
                else if(p.charAt(j)=='*')
                        match[i][j]=match[i+1][j]||match[i][j+1];
                else
                    match[i][j]=false;
            }
        }
        return match[0][0];
    }
}
这种方法没想到过，值得借鉴
运行时间129ms

