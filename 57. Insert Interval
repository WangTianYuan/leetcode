List<Interval> res = new ArrayList<Interval>();
		int length = intervals.size();
		if (length == 0) {
			res.add(newInterval);
			return res;
		}
		int[] start = new int[length];
		int[] end = new int[length];
		boolean isInsert = false;
		for (int i = 0; i < length; i++) {
			start[i] = intervals.get(i).start;
			end[i] = intervals.get(i).end;
		}
		for (int i = 0; i < length; i++) {
			if (!isInsert && start[i] > newInterval.end) {
				res.add(newInterval);
				isInsert = true;
			} else if (!isInsert && end[i] >= newInterval.start) {
				int s = Math.min(start[i], newInterval.start);
				while (i < length && start[i] <= newInterval.end)
					i++;
				int e = Math.max(end[--i], newInterval.end);//这里需要--i，不然会出现溢出的情况（下一个start就比插入的结束要大，continue之后会进行i++)
				res.add(new Interval(s, e));
				isInsert = true;
				continue;
			}
			res.add(new Interval(start[i], end[i]));
		}
		if (isInsert)
			return res;
		res.add(newInterval);
		return res;
思路：与上一题类似，这一题已经排好序了，剩下的就是遍历的时候进行判断
  首先判断start[i] > newInterval.end，满足条件说明插入的是最小的，直接放在第一个，然后循环一直添加后面的即可。
  不满足然后判断end[i] >= newInterval.start，说明start从这一个开始，首先取Math.min(start[i], newInterval.start)作为起始；
  然后循环判断(i < length && start[i] <= newInterval.end)这样可以得到插入的最后一个位置又不超过数组长度；
    取Math.max(end[--i], newInterval.end)作为结束，然后循环一直添加后面。
  其中采用了isInsert来判断是否已经插入（因为这里只需要插入一个），如果插入了的话，循环遍历出来直接返回res。
  如果没有插入，说明插入值为最大的，再添加插入即可。
用时17ms。


下面是二分法查找的方法，思路可以借鉴一下，节省了很多时间：复杂度O(logN)
public List<Interval> insert(List<Interval> intervals, Interval newInterval) {
		/**
		 * Since the original list is sorted and all intervals are disjoint,
		 * apply binary search to find the insertion index for the new
		 * interval. [LC35]
		 * 
		 * 1. Find insIdx=the insertion index of new.start, i.e., the first
		 * index i such that list.get(i).start>=new.start.
		 * 
		 * 2. Find nxtIdx=the insertion index of new.end, i.e., the first
		 * index i such that list.get(i).end>=new.end.
		 * 
		 * 3. Remove all elements of the list with indices insIdx<=i<nxtIdx.
		 * 
		 * 4. Merge new with list.get(insIdx-1) or list.get(nxtIdx) or both.
		 */

		int n = intervals.size();
		if (n == 0) {
			intervals.add(newInterval);
			return intervals;
		}

		int low = 0, high = n - 1, mid = 0;
		int temp, target = newInterval.start;
		while (low <= high) {
			mid = (low + high) / 2;
			temp = intervals.get(mid).start;
			if (temp == target)
				break;
			if (temp < target)
				low = mid + 1;
			else
				high = mid - 1;
		}

		// insIdx = the index where new interval to be inserted
		int insIdx = (low <= high) ? mid : low;
		Interval pre = (insIdx == 0) ? null : intervals.get(insIdx - 1);
		// 0<=insIdx<=n, pre=[insIdx-1], pre.start<new.start

		low = insIdx;
		high = n - 1;
		target = newInterval.end;
		while (low <= high) {
			mid = (low + high) / 2;
			temp = intervals.get(mid).end;
			if (temp == target)
				break;
			if (temp < target)
				low = mid + 1;
			else
				high = mid - 1;
		}

		// nxtIdx= the next index after the inserted new interval
		int nxtIdx = (low <= high) ? mid : low;
		Interval nxt = (nxtIdx == n) ? null : intervals.get(nxtIdx);
		// insIdx<=nxtIdx<=n, nxt=[nxtIdx], nxt.end>=new.end

		// [0]...[insIdx-1] <--> [insIdx]...[nxtIdx-1][nxtIdx]...[n]
		intervals.subList(insIdx, nxtIdx).clear();

		// check whether newInterval can be merged with pre or nxt
		boolean isMerged = false, isMerged2 = false;
		if (insIdx > 0 && pre.end >= newInterval.start) {
			pre.end = Math.max(pre.end, newInterval.end);
			isMerged = true;
		}

		if (nxtIdx < n && newInterval.end >= nxt.start) {
			nxt.start = Math.min(nxt.start, newInterval.start);
			isMerged2 = isMerged;
			isMerged = true;
		}

		if (!isMerged) {
			intervals.add(insIdx, newInterval);
			return intervals;
		}

		// merged with pre or nxt or both, deal with the both case
		if (isMerged2 && pre.end >= nxt.start) {
			nxt.start = pre.start; // pre.start < new.start, nxt.start;
			intervals.remove(insIdx - 1); // remove pre
		}

		return intervals;
	}

用时12ms。

还有一个思路比我的要清晰，参考一下：
public List<Interval> insert(List<Interval> intervals, Interval newInterval) {
    List<Interval> result = new LinkedList<>();
    int i = 0;
    // add all the intervals ending before newInterval starts
    while (i < intervals.size() && intervals.get(i).end < newInterval.start)
        result.add(intervals.get(i++));
    // merge all overlapping intervals to one considering newInterval
    while (i < intervals.size() && intervals.get(i).start <= newInterval.end) {
        newInterval = new Interval( // we could mutate newInterval here also
                Math.min(newInterval.start, intervals.get(i).start),
                Math.max(newInterval.end, intervals.get(i).end));
        i++;
    }
    result.add(newInterval); // add the union of intervals we got
    // add all the rest
    while (i < intervals.size()) result.add(intervals.get(i++)); 
    return result;
}

用时19ms。
