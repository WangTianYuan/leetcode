public int mySqrt(int x) {
		if (x == 0 || x == 1)
			return x;
		int l = 2;
		int r = x / 2;
		while (l < r) {
			l = l * 2;
			r = r / 2;
		}
		l = l / 2;
		System.out.println(l);
		while ((long) l * (long) l <= x)
			l++;
		return l - 1;
    }
思路：x的平方根在2^n和x/(2^n)之间，所以一致判断，当2^n>x/(2^n)时，说明之前的n就是一个适当的范围。然后遍历。
效率很低，用时18ma。

下面是采用二分法的办法，效率快了很多：
public int mySqrt(int x) {
        if (x == 0)
            return 0;
        int left = 1, right = x;
        while (true) {
            int mid = left + (right - left)/2;
            if (mid > x/mid) {
                right = mid - 1;
            } else {
                if (mid + 1 > x/(mid + 1))
                    return mid;
                left = mid + 1;
            }
        }
    }
用时2ms。
