public class Solution {
    public int divide(int dividend, int divisor) {
       if(divisor==0){
			return Integer.MAX_VALUE;
		}
		if(dividend==0){
			return 0;
		}
		boolean i=true;
		if(dividend>0&&divisor>0||dividend<0&&divisor<0){
			i=false;
		}
        long ldividend=Math.abs((long) dividend);
        long ldivisor=Math.abs((long) divisor);
        long result=0;
        while(ldividend>=ldivisor){
        	long tmp=ldivisor;
        	long count=1;
        	while(tmp<=ldividend){
        		tmp<<=1;
        		count<<=1;
        	}
        	result += count >> 1;
        	ldividend -= tmp >> 1;
        }
        //~result表示result的反码、+1即为补码
        return i ? (int) ~result + 1 : result > Integer.MAX_VALUE ? Integer.MAX_VALUE : (int) result;
    }
}


要考虑集中特殊情况，然后因为很容易溢出，所以使用long类型计算比较好，还有一个小技巧，除法可以通过位运算来进行对2乘除的操作~
