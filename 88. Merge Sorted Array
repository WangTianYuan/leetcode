public void merge(int[] nums1, int m, int[] nums2, int n) {
		for (int i = m + n - 1; i >= 0; i--) {
			if (n == 0)
				return;
			if (m == 0) {
				for (int j = n - 1; j >= 0; j--) {
					nums1[j] = nums2[j];
				}
				return;
			}
			if (nums1[m - 1] >= nums2[n - 1]) {
				nums1[i] = nums1[m - 1];
				m--;
			} else {
				nums1[i] = nums2[n - 1];
				n--;
			}
		}
	}

运行时间：0ms。思路：首先判断n==0，是的话说明没有第二个数组，直接返回即可；
                    然后判断m==0，是的话说明第一个数组为空，将第二个数组替换上去即可；
                    如果都不为0，然后从两个数组的最后一个开始判断，谁大就在nums1[m+n-i]的位置，然后对应的数组索引-1；
                    直到m或者n中的一个为0，就是前面的判断。


public void merge(int A[], int m, int B[], int n) {
    int length = m+n;
    while(n > 0) A[--length] = (m == 0 || A[m-1] < B[n-1]) ? B[--n] : A[--m];
}
运行时间：1ms。别人写的很简单的算法，从代码简便的角度考虑（思路肯定也是很清晰才能考虑到）。
