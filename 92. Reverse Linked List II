public ListNode reverseBetween(ListNode head, int m, int n) {
		if (head == null || head.next == null)
			return head;
		ListNode t1 = null;
		ListNode res = head;
		ListNode ts = head;
		ListNode te = head;
		int count = 1;
		while (head.next != null) {
			if (count < m) {
				t1 = head;
				head = head.next;
				ts = head;
			} else if (count >= m && count < n) {
				te = head.next;
				head.next = te.next;
				te.next = ts;
				ts = te;
			} else {
				break;
			}
			count++;
		}
		if (t1 == null)
			return ts;
		else
			t1.next = ts;
		return res;
	}

运行时间：0ms。思路：使用t1标记是否转换从第一个开始（是的话就返回置换的最后一个位置，即ts）
                      如果不是从第一个开始，那就返回res，即最开始的head头。
                    内部先找到前m-1个，用t1标记最后一个不被置换的位置，ts标记第一个被标记的位置
                    然后内部通过te进行置换，然后ts变为置换后的起始位置。
               最后判断完得到完整的链表。



public ListNode reverseBetween(ListNode head, int m, int n) {
    if(head == null) return null;
    ListNode dummy = new ListNode(0); // create a dummy node to mark the head of this list
    dummy.next = head;
    ListNode pre = dummy; // make a pointer pre as a marker for the node before reversing
    for(int i = 0; i<m-1; i++) pre = pre.next;
    
    ListNode start = pre.next; // a pointer to the beginning of a sub-list that will be reversed
    ListNode then = start.next; // a pointer to a node that will be reversed
    
    // 1 - 2 -3 - 4 - 5 ; m=2; n =4 ---> pre = 1, start = 2, then = 3
    // dummy-> 1 -> 2 -> 3 -> 4 -> 5
    
    for(int i=0; i<n-m; i++)
    {
        start.next = then.next;
        then.next = pre.next;
        pre.next = then;
        then = start.next;
    }
    
    // first reversing : dummy->1 - 3 - 2 - 4 - 5; pre = 1, start = 2, then = 4
    // second reversing: dummy->1 - 4 - 3 - 2 - 5; pre = 1, start = 2, then = 5 (finish)
    
    return dummy.next;
    
}
运行时间：0ms。思路跟上面的一样，不过循环设置的要好一些，不需要判断是否从第一个开始置换，用一个外部的节点指向链表，这样让内部的节点置换。
          外部节点指向置换后的第一个节点即可。
