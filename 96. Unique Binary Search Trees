public int numTrees(int n) {
		int[] G = new int[n + 1];
		G[0] = 1;
		for (int i = 1; i <= n; i++)
			for (int j = 1; j <= i; j++)
				G[i] += G[j - 1] * G[i - j];
		return G[n];
	}

运行时间：0ms。思路：https://discuss.leetcode.com/topic/8398/dp-solution-in-6-lines-with-explanation-f-i-n-g-i-1-g-n-i
  不知道怎么想到的，但是很好。
    f(i,n)表示根节点为i总共有n个节点的二叉树数量。
    所有最后的个数g(n)=f(1,n)+...+f(n,n)
    同时f(i,n)=g(i-1)*g(n-i)，（左边i-1个节点的子二叉树数量，右边n-i个节点的子二叉树数量，相乘即可）
    所以最后g(n)=g(0)*g(n-1)+g(1)*g(n-2)+...+g(n-1)*g(0);
    用上面的公式就能计算出来，具体分析可以看网页中的内容。



目前看到的所有的解决方式都是这样的DP方法，自己想象有没有别的解决方式。
