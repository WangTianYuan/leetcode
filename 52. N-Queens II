public int totalNQueens(int n) {
		if (n == 0)
			return 0;
		char[][] temp = new char[n][n];
		for (int i = 0; i < n; i++)
			for (int j = 0; j < n; j++)
				temp[i][j] = '.';
		int count=0;
		count = solver(temp, 0 ,count);
		return count;
	}

	public int solver(char[][] temp, int col, int count) {
		if (col == temp.length) {
			return ++count;
		}
		for (int i = 0; i < temp.length; i++) {
			if (isValid(temp, i, col)) {
				temp[i][col] = 'Q';
				count = solver(temp, col + 1, count);
				temp[i][col] = '.';
			}
		}
		return count;
	}

	public boolean isValid(char[][] temp, int x, int y) {
		for (int i = 0; i < temp.length; i++) {
			for (int j = 0; j < y; j++) {
				if (temp[i][j] == 'Q'
						&& (x + j == y + i || x + y == i + j || x == i))
					return false;
			}
		}
		return true;
	}
思路：跟上一题一样，就是不需要那个List，直接计数就好
用时8ms。

一个只需要3ms的方法：
/*
    常规n-queens解法, 数答案个数.
    用column标记此行之前的哪些column已经放置了queen. 棋盘坐标(row, col)对应column的第col位(LSB --> MSB, 下同).
    用diag标记此位置之前的哪些主对角线已经放置了queen. 棋盘坐标(row, col)对应diag的第(n - 1 + row - col)位.
    用antiDiag标记此位置之前的哪些副对角线已经放置了queen. 棋盘坐标(row, col)对应antiDiag的第(row + col)位.
*/
public class Solution {
    int count = 0;
    
    public int totalNQueens(int n) {
        dfs(0, n, 0, 0, 0);
        return count;
    }
    
    private void dfs(int row, int n, int column, int diag, int antiDiag) {
        if (row == n) {
            ++count;
            return;
        }
        for (int i = 0; i < n; ++i) {
            boolean isColSafe = ((1 << i) & column) == 0;
            boolean isDiagSafe = ((1 << (n - 1 + row - i)) & diag) == 0;
            boolean isAntiDiagSafe = ((1 << (row + i)) & antiDiag) == 0;
            if (isColSafe && isDiagSafe && isAntiDiagSafe) {
                dfs(row + 1, n, (1 << i) | column, (1 << (n - 1 + row - i)) | diag, (1 << (row + i)) | antiDiag);
            }
        }
    }
}
思路在注释中就说的很清楚了。
