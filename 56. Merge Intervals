public List<Interval> merge(List<Interval> intervals) {
		List<Interval> res = new ArrayList<Interval>();
		int length = intervals.size();
		if (length == 0)
			return res;
		int[] start = new int[length];
		int[] end = new int[length];
		for (int i = 0; i < length; i++) {
			start[i] = intervals.get(i).start;
			end[i] = intervals.get(i).end;
		}
		Arrays.sort(start);
		Arrays.sort(end);
		for (int i = 0, j = 0; i < length; i++) {
			if (i == length - 1 || start[i + 1] > end[i]) {
				res.add(new Interval(start[j], end[i]));
				j = i + 1;
			}
		}
		return res;
	}
思路：重叠的集合表明下一个start一定小于当前的end，所以我们将start和end排好序，然后遍历：
      当发现i == length - 1 || start[i + 1] > end[i]时，说明这一部分已经不重叠了，前面的部分可以算作一个集合的一个元素。
      其中start通过j来标记，end通过i来标记。这样遍历一边就能找出所有的重叠。
用时18ms。


一个新的方法是直接将现有的intervals按照start进行排序，然后再进行判断：
public List<Interval> merge(List<Interval> intervals) {
    if (intervals.size() <= 1)
        return intervals;
    
    // Sort by ascending starting point using an anonymous Comparator
    Collections.sort(intervals, new Comparator<Interval>() {
        @Override
        public int compare(Interval i1, Interval i2) {
            return Integer.compare(i1.start, i2.start);
        }
    });
    
    List<Interval> result = new LinkedList<Interval>();
    int start = intervals.get(0).start;
    int end = intervals.get(0).end;
    
    for (Interval interval : intervals) {
        if (interval.start <= end) // Overlapping intervals, move the end if needed
            end = Math.max(end, interval.end);
        else {                     // Disjoint intervals, add the previous one and reset bounds
            result.add(new Interval(start, end));
            start = interval.start;
            end = interval.end;
        }
    }
    
    // Add the last interval
    result.add(new Interval(start, end));
    return result;
}

思路其实都一致，这个耗时更久一些：25ms。
