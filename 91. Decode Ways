public int numDecodings(String s) {
        int n = s.length();
        if (n == 0) return 0;
        
        int[] memo = new int[n+1];
        memo[n]  = 1;
        memo[n-1] = s.charAt(n-1) != '0' ? 1 : 0;
        
        for (int i = n - 2; i >= 0; i--)
            if (s.charAt(i) == '0') continue;
            else memo[i] = (Integer.parseInt(s.substring(i,i+2))<=26) ? memo[i+1]+memo[i+2] : memo[i+1];
        
        return memo[0];
    }

运行时间：4ms。思路是用一个数组来判断s字符串中0出现的位置，出现0，表明必须和上一个捆绑，如果连续出现2个0，则返回0（通过两个0相加一直为0来确定）。
    后面就是遍历判断，从后往前，当是0的时候就不判断（因为必须和前一个绑定）
                              不是0的话判断从当前开始的2个字母是否小于26，小于的话说明多了一个选择（两个数相加）,不小于说明只有一个选择（等于前面）

最后得到的memo[0]就是要求的。
    其实自己也想到了memo[i+1]+memo[i+2]这种情况，只不过忘记了0这个字符的判断，而且是从前往后，所以没有弄出来。



public int numDecodings(String s) {
    int n1 =1, n2=1, n3=0;
    if(s.length()==0||s.charAt(0)=='0') return 0;
    for(int i=2; i<=s.length(); i++)
    {
        n3=0;
        if(s.charAt(i-1)!='0') n3=n2;
        int num = Integer.parseInt(s.substring(i-2,i));
        if(num>=10 && num<=26) n3+=n1;
        n1=n2;
        n2=n3;
    }
    return n2;
}
运行时间：4ms。这个就和我的思路很像，而且考虑到了0这个字符（这种边界条件一定要考虑好，要不然做不下去）

